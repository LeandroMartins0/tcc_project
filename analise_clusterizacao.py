import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

sns.set_style("whitegrid")

def plot_elbow_method(X):
    distortions = []
    K = range(1,10)
    for k in K:
        kmeanModel = KMeans(n_clusters=k)
        kmeanModel.fit(X)
        distortions.append(kmeanModel.inertia_)

    plt.figure(figsize=(10,6))
    plt.plot(K, distortions, 'bx-')
    plt.xlabel('N√∫mero de clusters')
    plt.ylabel('Distortion')
    plt.title('M√©todo do Cotovelo mostrando o n√∫mero √≥timo de clusters')
    return plt

def show(df):

    st.title("üìä Clusteriza√ß√£o de Postagens e An√°lise de Localiza√ß√£o")

    st.write("""
    ### üîç Clusteriza√ß√£o de Postagens

    Nesta an√°lise, estamos usando t√©cnicas de Machine Learning para agrupar postagens com caracter√≠sticas semelhantes em 'clusters'.
        
    **Por que clusterizar?**
        
    A clusteriza√ß√£o nos ajuda a identificar padr√µes nos dados. Por exemplo, podemos encontrar grupos de postagens que t√™m padr√µes de engajamento similares ou postagens que t√™m rea√ß√µes semelhantes do p√∫blico.

    **Como funciona?**

    - **Sele√ß√£o de Caracter√≠sticas**: Escolhemos caracter√≠sticas das postagens, como engajamento, sentimentos e outros atributos.
    - **Normaliza√ß√£o**: Padronizamos essas caracter√≠sticas para que tenham import√¢ncia igual na an√°lise.
    - **KMeans**: Utilizamos o algoritmo KMeans para formar os clusters.
    - **Determina√ß√£o do N√∫mero de Clusters**: Usamos o 'M√©todo do Cotovelo' para decidir o n√∫mero ideal de clusters.

    Vamos mergulhar nos detalhes abaixo!
    """)


    # Preparando os dados para a clusteriza√ß√£o
    # Selecionando colunas num√©ricas. Voc√™ pode adicionar ou remover de acordo com seus dados.
    cluster_data = df[['reacoes', 'curtidas', 'compartilhamentos', 'visualizacoes']]
    
    # Normalizando os dados
    scaler = StandardScaler()
    X = scaler.fit_transform(cluster_data)

    # Plotando o m√©todo do cotovelo para determinar o n√∫mero de clusters
    st.subheader("Determinando o N√∫mero de Clusters")
    plt = plot_elbow_method(X)
    st.pyplot(plt.gcf())
    plt.clf()

    st.write("""
    ### üîç M√©todo do Cotovelo

    O gr√°fico acima √© conhecido como "M√©todo do Cotovelo". Ele nos ajuda a escolher o n√∫mero "ideal" de clusters. O eixo Y mostra a distor√ß√£o, que diminui √† medida que o n√∫mero de clusters aumenta. O "cotovelo" do gr√°fico, ou seja, o ponto onde a taxa de diminui√ß√£o come√ßa a se nivelar, nos d√° uma ideia do n√∫mero ideal de clusters. Esse ponto representa um equil√≠brio entre precis√£o e efici√™ncia computacional.
    """)


    # Aplicando KMeans com o n√∫mero de clusters escolhido (vamos supor 3 para este exemplo)
    kmeans = KMeans(n_clusters=3)
    df['cluster'] = kmeans.fit_predict(X)

    # Verificando os centr√≥ides para determinar a ordem dos clusters
    centroids = kmeans.cluster_centers_

    # Usamos os centr√≥ides para mapear os clusters. Suponhamos que a primeira coluna (reacoes) seja um bom indicador de engajamento.
    cluster_order = centroids[:, 0].argsort()

    # Mapeando os r√≥tulos dos clusters para nomes descritivos
    cluster_mapping = {
        cluster_order[0]: 'Engajamento Baixo',
        cluster_order[1]: 'Engajamento M√©dio',
        cluster_order[2]: 'Engajamento Alto'
    }
    df['cluster'] = df['cluster'].map(cluster_mapping)

    # Visualizando os clusters
    st.subheader("Distribui√ß√£o dos Clusters")
    cluster_counts = df['cluster'].value_counts()
    sns.barplot(x=cluster_counts.index, y=cluster_counts.values, palette="viridis")
    plt.title('Distribui√ß√£o dos Clusters')
    st.pyplot(plt.gcf())
    plt.clf()


    st.write("""
    ### üß© O que s√£o esses Clusters?

    Cada barra acima representa um cluster. Um cluster √© um grupo de postagens que compartilham caracter√≠sticas semelhantes em termos de engajamento, sentimentos e outros par√¢metros que escolhemos.

    Por exemplo:

    - **Engajamento Alto** pode representar postagens com alto engajamento e sentimentos majoritariamente positivos.
    - **Engajamento M√©dio** pode representar postagens com engajamento moderado e sentimentos neutros.
    - **Engajamento Baixo** pode ser postagens com baixo engajamento e sentimentos negativos.

    (Nota: As descri√ß√µes acima s√£o hipot√©ticas. Uma an√°lise detalhada dos clusters reais √© necess√°ria para interpretar seu significado.)

    ### Como usamos esta informa√ß√£o?

    A identifica√ß√£o destes grupos nos permite entender melhor o comportamento e as prefer√™ncias do nosso p√∫blico. Podemos adaptar nosso conte√∫do com base nisso ou identificar √°reas que requerem mais aten√ß√£o.
    """)
